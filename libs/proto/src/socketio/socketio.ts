// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v4.25.3
// source: socketio/socketio.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "socketio";

export interface BaseResponse {
  status: string;
  msg: string;
  ok: boolean;
}

export interface DefaultResponse {
  res: BaseResponse | undefined;
}

export interface EmitRequest {
  room: string;
  event: string;
  data: string;
}

export interface JoinRequest {
  objectId: string;
  room: string;
}

function createBaseBaseResponse(): BaseResponse {
  return { status: "", msg: "", ok: false };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    if (message.ok !== false) {
      writer.uint32(24).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
    };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create(base?: DeepPartial<BaseResponse>): BaseResponse {
    return BaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BaseResponse>): BaseResponse {
    const message = createBaseBaseResponse();
    message.status = object.status ?? "";
    message.msg = object.msg ?? "";
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseDefaultResponse(): DefaultResponse {
  return { res: undefined };
}

export const DefaultResponse: MessageFns<DefaultResponse> = {
  encode(message: DefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: DefaultResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<DefaultResponse>): DefaultResponse {
    return DefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DefaultResponse>): DefaultResponse {
    const message = createBaseDefaultResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseEmitRequest(): EmitRequest {
  return { room: "", event: "", data: "" };
}

export const EmitRequest: MessageFns<EmitRequest> = {
  encode(message: EmitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.room !== "") {
      writer.uint32(10).string(message.room);
    }
    if (message.event !== "") {
      writer.uint32(18).string(message.event);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.room = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmitRequest {
    return {
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      event: isSet(object.event) ? globalThis.String(object.event) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: EmitRequest): unknown {
    const obj: any = {};
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.event !== "") {
      obj.event = message.event;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<EmitRequest>): EmitRequest {
    return EmitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EmitRequest>): EmitRequest {
    const message = createBaseEmitRequest();
    message.room = object.room ?? "";
    message.event = object.event ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseJoinRequest(): JoinRequest {
  return { objectId: "", room: "" };
}

export const JoinRequest: MessageFns<JoinRequest> = {
  encode(message: JoinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.objectId !== "") {
      writer.uint32(10).string(message.objectId);
    }
    if (message.room !== "") {
      writer.uint32(18).string(message.room);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.room = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinRequest {
    return {
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
      room: isSet(object.room) ? globalThis.String(object.room) : "",
    };
  },

  toJSON(message: JoinRequest): unknown {
    const obj: any = {};
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    if (message.room !== "") {
      obj.room = message.room;
    }
    return obj;
  },

  create(base?: DeepPartial<JoinRequest>): JoinRequest {
    return JoinRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JoinRequest>): JoinRequest {
    const message = createBaseJoinRequest();
    message.objectId = object.objectId ?? "";
    message.room = object.room ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
