// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v4.25.3
// source: genworker/genworker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "genworker";

export interface BaseResponse {
  status: string;
  msg: string;
  ok: boolean;
}

export interface DefaultResponse {
  res: BaseResponse | undefined;
}

export interface CreateRequest {
  name: string;
  ownerId: string;
}

export interface CreateResponse {
  res: BaseResponse | undefined;
  genworker: GenWorker | undefined;
}

export interface UpdateRequest {
  id: string;
  genworker: GenWorker | undefined;
}

export interface UpdateResponse {
  res: BaseResponse | undefined;
}

export interface FindOneByIdRequest {
  id: string;
  populateTeams?: boolean | undefined;
}

export interface FindResponse {
  res: BaseResponse | undefined;
  genworker?: GenWorker | undefined;
}

export interface EnqueueRequest {
  projectId: string;
  flowName: string;
  data: string;
}

export interface DequeueRequest {
  projectId: string;
  flowName: string;
}

export interface DequeueResponse {
  res: BaseResponse | undefined;
  data: string;
}

export interface RegisterRequest {
  ownerId: string;
  name: string;
}

export interface GenWorker {
  id: string;
  ownerId: string;
  name: string;
  isActive: boolean;
}

function createBaseBaseResponse(): BaseResponse {
  return { status: "", msg: "", ok: false };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    if (message.ok !== false) {
      writer.uint32(24).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
    };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create(base?: DeepPartial<BaseResponse>): BaseResponse {
    return BaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BaseResponse>): BaseResponse {
    const message = createBaseBaseResponse();
    message.status = object.status ?? "";
    message.msg = object.msg ?? "";
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseDefaultResponse(): DefaultResponse {
  return { res: undefined };
}

export const DefaultResponse: MessageFns<DefaultResponse> = {
  encode(message: DefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: DefaultResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<DefaultResponse>): DefaultResponse {
    return DefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DefaultResponse>): DefaultResponse {
    const message = createBaseDefaultResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseCreateRequest(): CreateRequest {
  return { name: "", ownerId: "" };
}

export const CreateRequest: MessageFns<CreateRequest> = {
  encode(message: CreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
    };
  },

  toJSON(message: CreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRequest>): CreateRequest {
    return CreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRequest>): CreateRequest {
    const message = createBaseCreateRequest();
    message.name = object.name ?? "";
    message.ownerId = object.ownerId ?? "";
    return message;
  },
};

function createBaseCreateResponse(): CreateResponse {
  return { res: undefined, genworker: undefined };
}

export const CreateResponse: MessageFns<CreateResponse> = {
  encode(message: CreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.genworker !== undefined) {
      GenWorker.encode(message.genworker, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworker = GenWorker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      genworker: isSet(object.genworker) ? GenWorker.fromJSON(object.genworker) : undefined,
    };
  },

  toJSON(message: CreateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.genworker !== undefined) {
      obj.genworker = GenWorker.toJSON(message.genworker);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResponse>): CreateResponse {
    return CreateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResponse>): CreateResponse {
    const message = createBaseCreateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.genworker = (object.genworker !== undefined && object.genworker !== null)
      ? GenWorker.fromPartial(object.genworker)
      : undefined;
    return message;
  },
};

function createBaseUpdateRequest(): UpdateRequest {
  return { id: "", genworker: undefined };
}

export const UpdateRequest: MessageFns<UpdateRequest> = {
  encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.genworker !== undefined) {
      GenWorker.encode(message.genworker, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworker = GenWorker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      genworker: isSet(object.genworker) ? GenWorker.fromJSON(object.genworker) : undefined,
    };
  },

  toJSON(message: UpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.genworker !== undefined) {
      obj.genworker = GenWorker.toJSON(message.genworker);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRequest>): UpdateRequest {
    return UpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRequest>): UpdateRequest {
    const message = createBaseUpdateRequest();
    message.id = object.id ?? "";
    message.genworker = (object.genworker !== undefined && object.genworker !== null)
      ? GenWorker.fromPartial(object.genworker)
      : undefined;
    return message;
  },
};

function createBaseUpdateResponse(): UpdateResponse {
  return { res: undefined };
}

export const UpdateResponse: MessageFns<UpdateResponse> = {
  encode(message: UpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: UpdateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateResponse>): UpdateResponse {
    return UpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateResponse>): UpdateResponse {
    const message = createBaseUpdateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseFindOneByIdRequest(): FindOneByIdRequest {
  return { id: "", populateTeams: undefined };
}

export const FindOneByIdRequest: MessageFns<FindOneByIdRequest> = {
  encode(message: FindOneByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.populateTeams !== undefined) {
      writer.uint32(16).bool(message.populateTeams);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.populateTeams = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      populateTeams: isSet(object.populateTeams) ? globalThis.Boolean(object.populateTeams) : undefined,
    };
  },

  toJSON(message: FindOneByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.populateTeams !== undefined) {
      obj.populateTeams = message.populateTeams;
    }
    return obj;
  },

  create(base?: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    return FindOneByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    const message = createBaseFindOneByIdRequest();
    message.id = object.id ?? "";
    message.populateTeams = object.populateTeams ?? undefined;
    return message;
  },
};

function createBaseFindResponse(): FindResponse {
  return { res: undefined, genworker: undefined };
}

export const FindResponse: MessageFns<FindResponse> = {
  encode(message: FindResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.genworker !== undefined) {
      GenWorker.encode(message.genworker, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworker = GenWorker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      genworker: isSet(object.genworker) ? GenWorker.fromJSON(object.genworker) : undefined,
    };
  },

  toJSON(message: FindResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.genworker !== undefined) {
      obj.genworker = GenWorker.toJSON(message.genworker);
    }
    return obj;
  },

  create(base?: DeepPartial<FindResponse>): FindResponse {
    return FindResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindResponse>): FindResponse {
    const message = createBaseFindResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.genworker = (object.genworker !== undefined && object.genworker !== null)
      ? GenWorker.fromPartial(object.genworker)
      : undefined;
    return message;
  },
};

function createBaseEnqueueRequest(): EnqueueRequest {
  return { projectId: "", flowName: "", data: "" };
}

export const EnqueueRequest: MessageFns<EnqueueRequest> = {
  encode(message: EnqueueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.flowName !== "") {
      writer.uint32(18).string(message.flowName);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnqueueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnqueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnqueueRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: EnqueueRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<EnqueueRequest>): EnqueueRequest {
    return EnqueueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnqueueRequest>): EnqueueRequest {
    const message = createBaseEnqueueRequest();
    message.projectId = object.projectId ?? "";
    message.flowName = object.flowName ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseDequeueRequest(): DequeueRequest {
  return { projectId: "", flowName: "" };
}

export const DequeueRequest: MessageFns<DequeueRequest> = {
  encode(message: DequeueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.flowName !== "") {
      writer.uint32(18).string(message.flowName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DequeueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDequeueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DequeueRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
    };
  },

  toJSON(message: DequeueRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    return obj;
  },

  create(base?: DeepPartial<DequeueRequest>): DequeueRequest {
    return DequeueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DequeueRequest>): DequeueRequest {
    const message = createBaseDequeueRequest();
    message.projectId = object.projectId ?? "";
    message.flowName = object.flowName ?? "";
    return message;
  },
};

function createBaseDequeueResponse(): DequeueResponse {
  return { res: undefined, data: "" };
}

export const DequeueResponse: MessageFns<DequeueResponse> = {
  encode(message: DequeueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DequeueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDequeueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DequeueResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: DequeueResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<DequeueResponse>): DequeueResponse {
    return DequeueResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DequeueResponse>): DequeueResponse {
    const message = createBaseDequeueResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { ownerId: "", name: "" };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerId !== "") {
      writer.uint32(10).string(message.ownerId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterRequest>): RegisterRequest {
    return RegisterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterRequest>): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.ownerId = object.ownerId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGenWorker(): GenWorker {
  return { id: "", ownerId: "", name: "", isActive: false };
}

export const GenWorker: MessageFns<GenWorker> = {
  encode(message: GenWorker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenWorker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenWorker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenWorker {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
    };
  },

  toJSON(message: GenWorker): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create(base?: DeepPartial<GenWorker>): GenWorker {
    return GenWorker.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenWorker>): GenWorker {
    const message = createBaseGenWorker();
    message.id = object.id ?? "";
    message.ownerId = object.ownerId ?? "";
    message.name = object.name ?? "";
    message.isActive = object.isActive ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
