// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v4.25.3
// source: team/team.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "team";

export interface BaseResponse {
  status: string;
  msg: string;
  ok: boolean;
}

export interface DefaultResponse {
  res: BaseResponse | undefined;
}

export interface CreateRequest {
  name: string;
  owner: string;
  members: string[];
  projects: string[];
}

export interface CreateResponse {
  res: BaseResponse | undefined;
  id?: string | undefined;
}

export interface UpdateRequest {
  id: string;
  team: Team | undefined;
}

export interface UpdateResponse {
  res: BaseResponse | undefined;
}

export interface FindOneByIdRequest {
  id: string;
}

export interface FindResponse {
  res: BaseResponse | undefined;
  team?: Team | undefined;
}

export interface FindByUserIdRequest {
  userId: string;
}

export interface FindByUserIdResponse {
  res: BaseResponse | undefined;
  teams: Team[];
}

export interface JoinRequest {
  id: string;
  user: string;
}

export interface JoinResponse {
  res: BaseResponse | undefined;
}

export interface LeaveRequest {
  id: string;
  user: string;
}

export interface LeaveResponse {
  res: BaseResponse | undefined;
}

export interface AssignGenworkerToTeamRequest {
  teamId: string;
  genworkerId: string;
}

export interface RemoveGenworkerFromTeamRequest {
  teamId: string;
  genworkerId: string;
}

export interface SetMasterGenworkerRequest {
  teamId: string;
  genworkerId: string;
}

export interface AddStorageGenworkerRequest {
  teamId: string;
  genworkerId: string;
}

export interface RemoveStorageGenworkerRequest {
  teamId: string;
  genworkerId: string;
}

export interface Team {
  id: string;
  name: string;
  owner: string;
  members: string[];
  projects: string[];
  masterGenworker?: string | undefined;
  storageGenworkers: string[];
  genworkers: string[];
}

function createBaseBaseResponse(): BaseResponse {
  return { status: "", msg: "", ok: false };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    if (message.ok !== false) {
      writer.uint32(24).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
    };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create(base?: DeepPartial<BaseResponse>): BaseResponse {
    return BaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BaseResponse>): BaseResponse {
    const message = createBaseBaseResponse();
    message.status = object.status ?? "";
    message.msg = object.msg ?? "";
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseDefaultResponse(): DefaultResponse {
  return { res: undefined };
}

export const DefaultResponse: MessageFns<DefaultResponse> = {
  encode(message: DefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: DefaultResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<DefaultResponse>): DefaultResponse {
    return DefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DefaultResponse>): DefaultResponse {
    const message = createBaseDefaultResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseCreateRequest(): CreateRequest {
  return { name: "", owner: "", members: [], projects: [] };
}

export const CreateRequest: MessageFns<CreateRequest> = {
  encode(message: CreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    for (const v of message.members) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.projects) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.members.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.projects.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      members: globalThis.Array.isArray(object?.members) ? object.members.map((e: any) => globalThis.String(e)) : [],
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.members?.length) {
      obj.members = message.members;
    }
    if (message.projects?.length) {
      obj.projects = message.projects;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRequest>): CreateRequest {
    return CreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRequest>): CreateRequest {
    const message = createBaseCreateRequest();
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.members = object.members?.map((e) => e) || [];
    message.projects = object.projects?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateResponse(): CreateResponse {
  return { res: undefined, id: undefined };
}

export const CreateResponse: MessageFns<CreateResponse> = {
  encode(message: CreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: CreateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResponse>): CreateResponse {
    return CreateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResponse>): CreateResponse {
    const message = createBaseCreateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseUpdateRequest(): UpdateRequest {
  return { id: "", team: undefined };
}

export const UpdateRequest: MessageFns<UpdateRequest> = {
  encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.team !== undefined) {
      Team.encode(message.team, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.team = Team.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      team: isSet(object.team) ? Team.fromJSON(object.team) : undefined,
    };
  },

  toJSON(message: UpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.team !== undefined) {
      obj.team = Team.toJSON(message.team);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRequest>): UpdateRequest {
    return UpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRequest>): UpdateRequest {
    const message = createBaseUpdateRequest();
    message.id = object.id ?? "";
    message.team = (object.team !== undefined && object.team !== null) ? Team.fromPartial(object.team) : undefined;
    return message;
  },
};

function createBaseUpdateResponse(): UpdateResponse {
  return { res: undefined };
}

export const UpdateResponse: MessageFns<UpdateResponse> = {
  encode(message: UpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: UpdateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateResponse>): UpdateResponse {
    return UpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateResponse>): UpdateResponse {
    const message = createBaseUpdateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseFindOneByIdRequest(): FindOneByIdRequest {
  return { id: "" };
}

export const FindOneByIdRequest: MessageFns<FindOneByIdRequest> = {
  encode(message: FindOneByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindOneByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    return FindOneByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    const message = createBaseFindOneByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindResponse(): FindResponse {
  return { res: undefined, team: undefined };
}

export const FindResponse: MessageFns<FindResponse> = {
  encode(message: FindResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.team !== undefined) {
      Team.encode(message.team, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.team = Team.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      team: isSet(object.team) ? Team.fromJSON(object.team) : undefined,
    };
  },

  toJSON(message: FindResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.team !== undefined) {
      obj.team = Team.toJSON(message.team);
    }
    return obj;
  },

  create(base?: DeepPartial<FindResponse>): FindResponse {
    return FindResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindResponse>): FindResponse {
    const message = createBaseFindResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.team = (object.team !== undefined && object.team !== null) ? Team.fromPartial(object.team) : undefined;
    return message;
  },
};

function createBaseFindByUserIdRequest(): FindByUserIdRequest {
  return { userId: "" };
}

export const FindByUserIdRequest: MessageFns<FindByUserIdRequest> = {
  encode(message: FindByUserIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByUserIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByUserIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindByUserIdRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: FindByUserIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<FindByUserIdRequest>): FindByUserIdRequest {
    return FindByUserIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindByUserIdRequest>): FindByUserIdRequest {
    const message = createBaseFindByUserIdRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseFindByUserIdResponse(): FindByUserIdResponse {
  return { res: undefined, teams: [] };
}

export const FindByUserIdResponse: MessageFns<FindByUserIdResponse> = {
  encode(message: FindByUserIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    for (const v of message.teams) {
      Team.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByUserIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByUserIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teams.push(Team.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindByUserIdResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => Team.fromJSON(e)) : [],
    };
  },

  toJSON(message: FindByUserIdResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => Team.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FindByUserIdResponse>): FindByUserIdResponse {
    return FindByUserIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindByUserIdResponse>): FindByUserIdResponse {
    const message = createBaseFindByUserIdResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.teams = object.teams?.map((e) => Team.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJoinRequest(): JoinRequest {
  return { id: "", user: "" };
}

export const JoinRequest: MessageFns<JoinRequest> = {
  encode(message: JoinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.user !== "") {
      writer.uint32(18).string(message.user);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: JoinRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create(base?: DeepPartial<JoinRequest>): JoinRequest {
    return JoinRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JoinRequest>): JoinRequest {
    const message = createBaseJoinRequest();
    message.id = object.id ?? "";
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseJoinResponse(): JoinResponse {
  return { res: undefined };
}

export const JoinResponse: MessageFns<JoinResponse> = {
  encode(message: JoinResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: JoinResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<JoinResponse>): JoinResponse {
    return JoinResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JoinResponse>): JoinResponse {
    const message = createBaseJoinResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseLeaveRequest(): LeaveRequest {
  return { id: "", user: "" };
}

export const LeaveRequest: MessageFns<LeaveRequest> = {
  encode(message: LeaveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.user !== "") {
      writer.uint32(18).string(message.user);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaveRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: LeaveRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create(base?: DeepPartial<LeaveRequest>): LeaveRequest {
    return LeaveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeaveRequest>): LeaveRequest {
    const message = createBaseLeaveRequest();
    message.id = object.id ?? "";
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseLeaveResponse(): LeaveResponse {
  return { res: undefined };
}

export const LeaveResponse: MessageFns<LeaveResponse> = {
  encode(message: LeaveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaveResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: LeaveResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<LeaveResponse>): LeaveResponse {
    return LeaveResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeaveResponse>): LeaveResponse {
    const message = createBaseLeaveResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseAssignGenworkerToTeamRequest(): AssignGenworkerToTeamRequest {
  return { teamId: "", genworkerId: "" };
}

export const AssignGenworkerToTeamRequest: MessageFns<AssignGenworkerToTeamRequest> = {
  encode(message: AssignGenworkerToTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.genworkerId !== "") {
      writer.uint32(18).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignGenworkerToTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignGenworkerToTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignGenworkerToTeamRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: AssignGenworkerToTeamRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<AssignGenworkerToTeamRequest>): AssignGenworkerToTeamRequest {
    return AssignGenworkerToTeamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssignGenworkerToTeamRequest>): AssignGenworkerToTeamRequest {
    const message = createBaseAssignGenworkerToTeamRequest();
    message.teamId = object.teamId ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseRemoveGenworkerFromTeamRequest(): RemoveGenworkerFromTeamRequest {
  return { teamId: "", genworkerId: "" };
}

export const RemoveGenworkerFromTeamRequest: MessageFns<RemoveGenworkerFromTeamRequest> = {
  encode(message: RemoveGenworkerFromTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.genworkerId !== "") {
      writer.uint32(18).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveGenworkerFromTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveGenworkerFromTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveGenworkerFromTeamRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: RemoveGenworkerFromTeamRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveGenworkerFromTeamRequest>): RemoveGenworkerFromTeamRequest {
    return RemoveGenworkerFromTeamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveGenworkerFromTeamRequest>): RemoveGenworkerFromTeamRequest {
    const message = createBaseRemoveGenworkerFromTeamRequest();
    message.teamId = object.teamId ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseSetMasterGenworkerRequest(): SetMasterGenworkerRequest {
  return { teamId: "", genworkerId: "" };
}

export const SetMasterGenworkerRequest: MessageFns<SetMasterGenworkerRequest> = {
  encode(message: SetMasterGenworkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.genworkerId !== "") {
      writer.uint32(18).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetMasterGenworkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMasterGenworkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMasterGenworkerRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: SetMasterGenworkerRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<SetMasterGenworkerRequest>): SetMasterGenworkerRequest {
    return SetMasterGenworkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetMasterGenworkerRequest>): SetMasterGenworkerRequest {
    const message = createBaseSetMasterGenworkerRequest();
    message.teamId = object.teamId ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseAddStorageGenworkerRequest(): AddStorageGenworkerRequest {
  return { teamId: "", genworkerId: "" };
}

export const AddStorageGenworkerRequest: MessageFns<AddStorageGenworkerRequest> = {
  encode(message: AddStorageGenworkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.genworkerId !== "") {
      writer.uint32(18).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddStorageGenworkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddStorageGenworkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddStorageGenworkerRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: AddStorageGenworkerRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<AddStorageGenworkerRequest>): AddStorageGenworkerRequest {
    return AddStorageGenworkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddStorageGenworkerRequest>): AddStorageGenworkerRequest {
    const message = createBaseAddStorageGenworkerRequest();
    message.teamId = object.teamId ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseRemoveStorageGenworkerRequest(): RemoveStorageGenworkerRequest {
  return { teamId: "", genworkerId: "" };
}

export const RemoveStorageGenworkerRequest: MessageFns<RemoveStorageGenworkerRequest> = {
  encode(message: RemoveStorageGenworkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.genworkerId !== "") {
      writer.uint32(18).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveStorageGenworkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveStorageGenworkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveStorageGenworkerRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: RemoveStorageGenworkerRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveStorageGenworkerRequest>): RemoveStorageGenworkerRequest {
    return RemoveStorageGenworkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveStorageGenworkerRequest>): RemoveStorageGenworkerRequest {
    const message = createBaseRemoveStorageGenworkerRequest();
    message.teamId = object.teamId ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseTeam(): Team {
  return {
    id: "",
    name: "",
    owner: "",
    members: [],
    projects: [],
    masterGenworker: undefined,
    storageGenworkers: [],
    genworkers: [],
  };
}

export const Team: MessageFns<Team> = {
  encode(message: Team, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    for (const v of message.members) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.projects) {
      writer.uint32(42).string(v!);
    }
    if (message.masterGenworker !== undefined) {
      writer.uint32(50).string(message.masterGenworker);
    }
    for (const v of message.storageGenworkers) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.genworkers) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Team {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.members.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.projects.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.masterGenworker = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.storageGenworkers.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.genworkers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Team {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      members: globalThis.Array.isArray(object?.members) ? object.members.map((e: any) => globalThis.String(e)) : [],
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => globalThis.String(e)) : [],
      masterGenworker: isSet(object.masterGenworker) ? globalThis.String(object.masterGenworker) : undefined,
      storageGenworkers: globalThis.Array.isArray(object?.storageGenworkers)
        ? object.storageGenworkers.map((e: any) => globalThis.String(e))
        : [],
      genworkers: globalThis.Array.isArray(object?.genworkers)
        ? object.genworkers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Team): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.members?.length) {
      obj.members = message.members;
    }
    if (message.projects?.length) {
      obj.projects = message.projects;
    }
    if (message.masterGenworker !== undefined) {
      obj.masterGenworker = message.masterGenworker;
    }
    if (message.storageGenworkers?.length) {
      obj.storageGenworkers = message.storageGenworkers;
    }
    if (message.genworkers?.length) {
      obj.genworkers = message.genworkers;
    }
    return obj;
  },

  create(base?: DeepPartial<Team>): Team {
    return Team.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Team>): Team {
    const message = createBaseTeam();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.members = object.members?.map((e) => e) || [];
    message.projects = object.projects?.map((e) => e) || [];
    message.masterGenworker = object.masterGenworker ?? undefined;
    message.storageGenworkers = object.storageGenworkers?.map((e) => e) || [];
    message.genworkers = object.genworkers?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
