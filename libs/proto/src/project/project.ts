// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v4.25.3
// source: project/project.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "project";

export interface DefaultResponse {
  res: BaseResponse | undefined;
}

export interface BaseResponse {
  status: string;
  msg: string;
  ok: boolean;
}

export interface CreateRequest {
  name: string;
  description: string;
  owner: string;
}

export interface CreateResponse {
  res: BaseResponse | undefined;
  id: string;
}

export interface UpdateRequest {
  id: string;
  project: Project | undefined;
}

export interface UpdateResponse {
  res: BaseResponse | undefined;
}

export interface FindOneByIdRequest {
  id: string;
}

export interface FindResponse {
  res: BaseResponse | undefined;
  project?: Project | undefined;
}

export interface CreateFlowRequest {
  id: string;
  flow: Flow | undefined;
}

export interface CreateFlowResponse {
  res: BaseResponse | undefined;
  flow?: Flow | undefined;
}

export interface UpdateFlowRequest {
  id: string;
  flowName: string;
  path: string;
  flow: Flow | undefined;
}

export interface UpdateFlowResponse {
  res: BaseResponse | undefined;
}

export interface UpdateFlowDataRequest {
  operation: string;
  id: string;
  flowName: string;
  path: string;
  data: string;
}

export interface UpdateFlowDataResponse {
  res: BaseResponse | undefined;
}

export interface FindOneByNameFlowRequest {
  id: string;
  flowName: string;
  path: string;
}

export interface FindFlowResponse {
  id: string;
  flow: Flow | undefined;
}

export interface FindByTeamIdRequest {
  id: string;
}

export interface FindByTeamIdResponse {
  res: BaseResponse | undefined;
  projects: Project[];
}

export interface AssignGenworkerRequest {
  projectId: string;
  flowName: string;
  path: string;
  genworkerId: string;
}

export interface Project {
  id: string;
  name: string;
  description: string;
  owner: string;
  flows: Flow[];
}

export interface Flow {
  name: string;
  path: string;
  description: string;
  type: string;
  nodes: Node[];
  edges: Edge[];
  genworkers: string[];
}

export interface Node {
  id: string;
  type: string;
  position: string;
  package: string;
  path: string;
  style: string;
  data: string;
}

export interface Edge {
  id: string;
  source: string;
  sourceHandle: string;
  target: string;
  targetHandle: string;
}

function createBaseDefaultResponse(): DefaultResponse {
  return { res: undefined };
}

export const DefaultResponse: MessageFns<DefaultResponse> = {
  encode(message: DefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: DefaultResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<DefaultResponse>): DefaultResponse {
    return DefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DefaultResponse>): DefaultResponse {
    const message = createBaseDefaultResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseBaseResponse(): BaseResponse {
  return { status: "", msg: "", ok: false };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    if (message.ok !== false) {
      writer.uint32(24).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
    };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create(base?: DeepPartial<BaseResponse>): BaseResponse {
    return BaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BaseResponse>): BaseResponse {
    const message = createBaseBaseResponse();
    message.status = object.status ?? "";
    message.msg = object.msg ?? "";
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseCreateRequest(): CreateRequest {
  return { name: "", description: "", owner: "" };
}

export const CreateRequest: MessageFns<CreateRequest> = {
  encode(message: CreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.owner !== "") {
      writer.uint32(34).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: CreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRequest>): CreateRequest {
    return CreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRequest>): CreateRequest {
    const message = createBaseCreateRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseCreateResponse(): CreateResponse {
  return { res: undefined, id: "" };
}

export const CreateResponse: MessageFns<CreateResponse> = {
  encode(message: CreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: CreateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResponse>): CreateResponse {
    return CreateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResponse>): CreateResponse {
    const message = createBaseCreateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateRequest(): UpdateRequest {
  return { id: "", project: undefined };
}

export const UpdateRequest: MessageFns<UpdateRequest> = {
  encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      project: isSet(object.project) ? Project.fromJSON(object.project) : undefined,
    };
  },

  toJSON(message: UpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRequest>): UpdateRequest {
    return UpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRequest>): UpdateRequest {
    const message = createBaseUpdateRequest();
    message.id = object.id ?? "";
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseUpdateResponse(): UpdateResponse {
  return { res: undefined };
}

export const UpdateResponse: MessageFns<UpdateResponse> = {
  encode(message: UpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: UpdateResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateResponse>): UpdateResponse {
    return UpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateResponse>): UpdateResponse {
    const message = createBaseUpdateResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseFindOneByIdRequest(): FindOneByIdRequest {
  return { id: "" };
}

export const FindOneByIdRequest: MessageFns<FindOneByIdRequest> = {
  encode(message: FindOneByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindOneByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    return FindOneByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneByIdRequest>): FindOneByIdRequest {
    const message = createBaseFindOneByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindResponse(): FindResponse {
  return { res: undefined, project: undefined };
}

export const FindResponse: MessageFns<FindResponse> = {
  encode(message: FindResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      project: isSet(object.project) ? Project.fromJSON(object.project) : undefined,
    };
  },

  toJSON(message: FindResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<FindResponse>): FindResponse {
    return FindResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindResponse>): FindResponse {
    const message = createBaseFindResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseCreateFlowRequest(): CreateFlowRequest {
  return { id: "", flow: undefined };
}

export const CreateFlowRequest: MessageFns<CreateFlowRequest> = {
  encode(message: CreateFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFlowRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
    };
  },

  toJSON(message: CreateFlowRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFlowRequest>): CreateFlowRequest {
    return CreateFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFlowRequest>): CreateFlowRequest {
    const message = createBaseCreateFlowRequest();
    message.id = object.id ?? "";
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseCreateFlowResponse(): CreateFlowResponse {
  return { res: undefined, flow: undefined };
}

export const CreateFlowResponse: MessageFns<CreateFlowResponse> = {
  encode(message: CreateFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFlowResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
    };
  },

  toJSON(message: CreateFlowResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFlowResponse>): CreateFlowResponse {
    return CreateFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFlowResponse>): CreateFlowResponse {
    const message = createBaseCreateFlowResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseUpdateFlowRequest(): UpdateFlowRequest {
  return { id: "", flowName: "", path: "", flow: undefined };
}

export const UpdateFlowRequest: MessageFns<UpdateFlowRequest> = {
  encode(message: UpdateFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flowName !== "") {
      writer.uint32(18).string(message.flowName);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFlowRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
    };
  },

  toJSON(message: UpdateFlowRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFlowRequest>): UpdateFlowRequest {
    return UpdateFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFlowRequest>): UpdateFlowRequest {
    const message = createBaseUpdateFlowRequest();
    message.id = object.id ?? "";
    message.flowName = object.flowName ?? "";
    message.path = object.path ?? "";
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseUpdateFlowResponse(): UpdateFlowResponse {
  return { res: undefined };
}

export const UpdateFlowResponse: MessageFns<UpdateFlowResponse> = {
  encode(message: UpdateFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFlowResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: UpdateFlowResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFlowResponse>): UpdateFlowResponse {
    return UpdateFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFlowResponse>): UpdateFlowResponse {
    const message = createBaseUpdateFlowResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseUpdateFlowDataRequest(): UpdateFlowDataRequest {
  return { operation: "", id: "", flowName: "", path: "", data: "" };
}

export const UpdateFlowDataRequest: MessageFns<UpdateFlowDataRequest> = {
  encode(message: UpdateFlowDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(10).string(message.operation);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.flowName !== "") {
      writer.uint32(26).string(message.flowName);
    }
    if (message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    if (message.data !== "") {
      writer.uint32(42).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFlowDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFlowDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFlowDataRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: UpdateFlowDataRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFlowDataRequest>): UpdateFlowDataRequest {
    return UpdateFlowDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFlowDataRequest>): UpdateFlowDataRequest {
    const message = createBaseUpdateFlowDataRequest();
    message.operation = object.operation ?? "";
    message.id = object.id ?? "";
    message.flowName = object.flowName ?? "";
    message.path = object.path ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseUpdateFlowDataResponse(): UpdateFlowDataResponse {
  return { res: undefined };
}

export const UpdateFlowDataResponse: MessageFns<UpdateFlowDataResponse> = {
  encode(message: UpdateFlowDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFlowDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFlowDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFlowDataResponse {
    return { res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined };
  },

  toJSON(message: UpdateFlowDataResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFlowDataResponse>): UpdateFlowDataResponse {
    return UpdateFlowDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFlowDataResponse>): UpdateFlowDataResponse {
    const message = createBaseUpdateFlowDataResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseFindOneByNameFlowRequest(): FindOneByNameFlowRequest {
  return { id: "", flowName: "", path: "" };
}

export const FindOneByNameFlowRequest: MessageFns<FindOneByNameFlowRequest> = {
  encode(message: FindOneByNameFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flowName !== "") {
      writer.uint32(18).string(message.flowName);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneByNameFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneByNameFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneByNameFlowRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: FindOneByNameFlowRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<FindOneByNameFlowRequest>): FindOneByNameFlowRequest {
    return FindOneByNameFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneByNameFlowRequest>): FindOneByNameFlowRequest {
    const message = createBaseFindOneByNameFlowRequest();
    message.id = object.id ?? "";
    message.flowName = object.flowName ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseFindFlowResponse(): FindFlowResponse {
  return { id: "", flow: undefined };
}

export const FindFlowResponse: MessageFns<FindFlowResponse> = {
  encode(message: FindFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindFlowResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
    };
  },

  toJSON(message: FindFlowResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create(base?: DeepPartial<FindFlowResponse>): FindFlowResponse {
    return FindFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindFlowResponse>): FindFlowResponse {
    const message = createBaseFindFlowResponse();
    message.id = object.id ?? "";
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseFindByTeamIdRequest(): FindByTeamIdRequest {
  return { id: "" };
}

export const FindByTeamIdRequest: MessageFns<FindByTeamIdRequest> = {
  encode(message: FindByTeamIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByTeamIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByTeamIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindByTeamIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindByTeamIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindByTeamIdRequest>): FindByTeamIdRequest {
    return FindByTeamIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindByTeamIdRequest>): FindByTeamIdRequest {
    const message = createBaseFindByTeamIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindByTeamIdResponse(): FindByTeamIdResponse {
  return { res: undefined, projects: [] };
}

export const FindByTeamIdResponse: MessageFns<FindByTeamIdResponse> = {
  encode(message: FindByTeamIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.res !== undefined) {
      BaseResponse.encode(message.res, writer.uint32(10).fork()).join();
    }
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByTeamIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByTeamIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.res = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindByTeamIdResponse {
    return {
      res: isSet(object.res) ? BaseResponse.fromJSON(object.res) : undefined,
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: FindByTeamIdResponse): unknown {
    const obj: any = {};
    if (message.res !== undefined) {
      obj.res = BaseResponse.toJSON(message.res);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FindByTeamIdResponse>): FindByTeamIdResponse {
    return FindByTeamIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindByTeamIdResponse>): FindByTeamIdResponse {
    const message = createBaseFindByTeamIdResponse();
    message.res = (object.res !== undefined && object.res !== null) ? BaseResponse.fromPartial(object.res) : undefined;
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAssignGenworkerRequest(): AssignGenworkerRequest {
  return { projectId: "", flowName: "", path: "", genworkerId: "" };
}

export const AssignGenworkerRequest: MessageFns<AssignGenworkerRequest> = {
  encode(message: AssignGenworkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.flowName !== "") {
      writer.uint32(18).string(message.flowName);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.genworkerId !== "") {
      writer.uint32(34).string(message.genworkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignGenworkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignGenworkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flowName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.genworkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignGenworkerRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      flowName: isSet(object.flowName) ? globalThis.String(object.flowName) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      genworkerId: isSet(object.genworkerId) ? globalThis.String(object.genworkerId) : "",
    };
  },

  toJSON(message: AssignGenworkerRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.flowName !== "") {
      obj.flowName = message.flowName;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.genworkerId !== "") {
      obj.genworkerId = message.genworkerId;
    }
    return obj;
  },

  create(base?: DeepPartial<AssignGenworkerRequest>): AssignGenworkerRequest {
    return AssignGenworkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssignGenworkerRequest>): AssignGenworkerRequest {
    const message = createBaseAssignGenworkerRequest();
    message.projectId = object.projectId ?? "";
    message.flowName = object.flowName ?? "";
    message.path = object.path ?? "";
    message.genworkerId = object.genworkerId ?? "";
    return message;
  },
};

function createBaseProject(): Project {
  return { id: "", name: "", description: "", owner: "", flows: [] };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.owner !== "") {
      writer.uint32(34).string(message.owner);
    }
    for (const v of message.flows) {
      Flow.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.flows.push(Flow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      flows: globalThis.Array.isArray(object?.flows) ? object.flows.map((e: any) => Flow.fromJSON(e)) : [],
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.flows?.length) {
      obj.flows = message.flows.map((e) => Flow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Project>): Project {
    return Project.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project>): Project {
    const message = createBaseProject();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.owner = object.owner ?? "";
    message.flows = object.flows?.map((e) => Flow.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFlow(): Flow {
  return { name: "", path: "", description: "", type: "", nodes: [], edges: [], genworkers: [] };
}

export const Flow: MessageFns<Flow> = {
  encode(message: Flow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    for (const v of message.nodes) {
      Node.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.edges) {
      Edge.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.genworkers) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Flow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nodes.push(Node.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.edges.push(Edge.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.genworkers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Flow {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e: any) => Node.fromJSON(e)) : [],
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => Edge.fromJSON(e)) : [],
      genworkers: globalThis.Array.isArray(object?.genworkers)
        ? object.genworkers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Flow): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.nodes?.length) {
      obj.nodes = message.nodes.map((e) => Node.toJSON(e));
    }
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => Edge.toJSON(e));
    }
    if (message.genworkers?.length) {
      obj.genworkers = message.genworkers;
    }
    return obj;
  },

  create(base?: DeepPartial<Flow>): Flow {
    return Flow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Flow>): Flow {
    const message = createBaseFlow();
    message.name = object.name ?? "";
    message.path = object.path ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? "";
    message.nodes = object.nodes?.map((e) => Node.fromPartial(e)) || [];
    message.edges = object.edges?.map((e) => Edge.fromPartial(e)) || [];
    message.genworkers = object.genworkers?.map((e) => e) || [];
    return message;
  },
};

function createBaseNode(): Node {
  return { id: "", type: "", position: "", package: "", path: "", style: "", data: "" };
}

export const Node: MessageFns<Node> = {
  encode(message: Node, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.position !== "") {
      writer.uint32(26).string(message.position);
    }
    if (message.package !== "") {
      writer.uint32(50).string(message.package);
    }
    if (message.path !== "") {
      writer.uint32(58).string(message.path);
    }
    if (message.style !== "") {
      writer.uint32(34).string(message.style);
    }
    if (message.data !== "") {
      writer.uint32(42).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Node {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.package = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.style = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Node {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      package: isSet(object.package) ? globalThis.String(object.package) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      style: isSet(object.style) ? globalThis.String(object.style) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: Node): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.package !== "") {
      obj.package = message.package;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.style !== "") {
      obj.style = message.style;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<Node>): Node {
    return Node.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Node>): Node {
    const message = createBaseNode();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.position = object.position ?? "";
    message.package = object.package ?? "";
    message.path = object.path ?? "";
    message.style = object.style ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseEdge(): Edge {
  return { id: "", source: "", sourceHandle: "", target: "", targetHandle: "" };
}

export const Edge: MessageFns<Edge> = {
  encode(message: Edge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    if (message.sourceHandle !== "") {
      writer.uint32(26).string(message.sourceHandle);
    }
    if (message.target !== "") {
      writer.uint32(34).string(message.target);
    }
    if (message.targetHandle !== "") {
      writer.uint32(42).string(message.targetHandle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceHandle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.targetHandle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edge {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      sourceHandle: isSet(object.sourceHandle) ? globalThis.String(object.sourceHandle) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      targetHandle: isSet(object.targetHandle) ? globalThis.String(object.targetHandle) : "",
    };
  },

  toJSON(message: Edge): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.sourceHandle !== "") {
      obj.sourceHandle = message.sourceHandle;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.targetHandle !== "") {
      obj.targetHandle = message.targetHandle;
    }
    return obj;
  },

  create(base?: DeepPartial<Edge>): Edge {
    return Edge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edge>): Edge {
    const message = createBaseEdge();
    message.id = object.id ?? "";
    message.source = object.source ?? "";
    message.sourceHandle = object.sourceHandle ?? "";
    message.target = object.target ?? "";
    message.targetHandle = object.targetHandle ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
